// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package http represents the imported interface "wasmvision:platform/http".
package http

import (
	"github.com/bytecodealliance/wasm-tools-go/cm"
)

// HTTPError represents the enum "wasmvision:platform/http#http-error".
//
// HTTP errors returned by the runtime.
//
//	enum http-error {
//		success,
//		destination-not-allowed,
//		invalid-url,
//		request-error,
//		runtime-error,
//		too-many-requests
//	}
type HTTPError uint8

const (
	HTTPErrorSuccess HTTPError = iota
	HTTPErrorDestinationNotAllowed
	HTTPErrorInvalidURL
	HTTPErrorRequestError
	HTTPErrorRuntimeError
	HTTPErrorTooManyRequests
)

var stringsHTTPError = [6]string{
	"success",
	"destination-not-allowed",
	"invalid-url",
	"request-error",
	"runtime-error",
	"too-many-requests",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e HTTPError) String() string {
	return stringsHTTPError[e]
}

// Error represents the variant "wasmvision:platform/http#error".
//
// The set of errors which may be raised by functions in this interface
//
//	variant error {
//		store-table-full,
//		no-such-store,
//		access-denied,
//		other(string),
//	}
type Error cm.Variant[uint8, string, string]

// ErrorStoreTableFull returns a [Error] of case "store-table-full".
//
// Too many stores have been opened simultaneously. Closing one or more
// stores prior to retrying may address this.
func ErrorStoreTableFull() Error {
	var data struct{}
	return cm.New[Error](0, data)
}

// StoreTableFull returns true if [Error] represents the variant case "store-table-full".
func (self *Error) StoreTableFull() bool {
	return self.Tag() == 0
}

// ErrorNoSuchStore returns a [Error] of case "no-such-store".
//
// The host does not recognize the store label requested.
func ErrorNoSuchStore() Error {
	var data struct{}
	return cm.New[Error](1, data)
}

// NoSuchStore returns true if [Error] represents the variant case "no-such-store".
func (self *Error) NoSuchStore() bool {
	return self.Tag() == 1
}

// ErrorAccessDenied returns a [Error] of case "access-denied".
//
// The requesting component does not have access to the specified store
// (which may or may not exist).
func ErrorAccessDenied() Error {
	var data struct{}
	return cm.New[Error](2, data)
}

// AccessDenied returns true if [Error] represents the variant case "access-denied".
func (self *Error) AccessDenied() bool {
	return self.Tag() == 2
}

// ErrorOther returns a [Error] of case "other".
//
// Some implementation-specific error has occurred (e.g. I/O)
func ErrorOther(data string) Error {
	return cm.New[Error](3, data)
}

// Other returns a non-nil *[string] if [Error] represents the variant case "other".
func (self *Error) Other() *string {
	return cm.Case[string](self, 3)
}

var stringsError = [4]string{
	"store-table-full",
	"no-such-store",
	"access-denied",
	"other",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Error) String() string {
	return stringsError[v.Tag()]
}

// Get represents the imported function "get".
//
//	get: func(url: string) -> result<list<u8>, http-error>
//
//go:nosplit
func Get(url string) (result cm.Result[cm.List[uint8], cm.List[uint8], HTTPError]) {
	url0, url1 := cm.LowerString(url)
	wasmimport_Get((*uint8)(url0), (uint32)(url1), &result)
	return
}

//go:wasmimport wasmvision:platform/http get
//go:noescape
func wasmimport_Get(url0 *uint8, url1 uint32, result *cm.Result[cm.List[uint8], cm.List[uint8], HTTPError])

// Post represents the imported function "post".
//
//	post: func(url: string, content-type: string, body: list<u8>) -> result<list<u8>,
//	http-error>
//
//go:nosplit
func Post(url string, contentType string, body cm.List[uint8]) (result cm.Result[cm.List[uint8], cm.List[uint8], HTTPError]) {
	url0, url1 := cm.LowerString(url)
	contentType0, contentType1 := cm.LowerString(contentType)
	body0, body1 := cm.LowerList(body)
	wasmimport_Post((*uint8)(url0), (uint32)(url1), (*uint8)(contentType0), (uint32)(contentType1), (*uint8)(body0), (uint32)(body1), &result)
	return
}

//go:wasmimport wasmvision:platform/http post
//go:noescape
func wasmimport_Post(url0 *uint8, url1 uint32, contentType0 *uint8, contentType1 uint32, body0 *uint8, body1 uint32, result *cm.Result[cm.List[uint8], cm.List[uint8], HTTPError])
