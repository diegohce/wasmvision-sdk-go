// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package datastore represents the imported interface "wasmvision:platform/datastore".
package datastore

import (
	"go.bytecodealliance.org/cm"
)

// Framedata represents the imported resource "wasmvision:platform/datastore#framedata".
//
// An open key-value store
//
//	resource framedata
type Framedata cm.Resource

// ResourceDrop represents the imported resource-drop for resource "framedata".
//
// Drops a resource handle.
//
//go:nosplit
func (self Framedata) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_FramedataResourceDrop((uint32)(self0))
	return
}

// FramedataOpen represents the imported static function "open".
//
// Open the frame datastore for the specified frame.
//
// `error::no-such-store` will be raised if the `frame` is not recognized.
//
//	open: static func(frame: u32) -> result<framedata, datastore-error>
//
//go:nosplit
func FramedataOpen(frame uint32) (result cm.Result[Framedata, Framedata, DatastoreError]) {
	frame0 := (uint32)(frame)
	wasmimport_FramedataOpen((uint32)(frame0), &result)
	return
}

// Delete represents the imported method "delete".
//
// Delete the tuple with the specified `key`
//
// No error is raised if a tuple did not previously exist for `key`.
//
//	delete: func(key: string) -> result<_, datastore-error>
//
//go:nosplit
func (self Framedata) Delete(key string) (result cm.Result[DatastoreError, struct{}, DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_FramedataDelete((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Exists represents the imported method "exists".
//
// Return whether a tuple exists for the specified `key`
//
//	exists: func(key: string) -> result<bool, datastore-error>
//
//go:nosplit
func (self Framedata) Exists(key string) (result cm.Result[bool, bool, DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_FramedataExists((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Get represents the imported method "get".
//
// Get the value associated with the specified `key`
//
// Returns `ok(none)` if the key does not exist.
//
//	get: func(key: string) -> result<list<u8>, datastore-error>
//
//go:nosplit
func (self Framedata) Get(key string) (result cm.Result[cm.List[uint8], cm.List[uint8], DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_FramedataGet((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// GetKeys represents the imported method "get-keys".
//
// Return a list of all the keys
//
//	get-keys: func() -> result<list<string>, datastore-error>
//
//go:nosplit
func (self Framedata) GetKeys() (result cm.Result[cm.List[string], cm.List[string], DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_FramedataGetKeys((uint32)(self0), &result)
	return
}

// Set represents the imported method "set".
//
// Set the `value` associated with the specified `key` overwriting any existing value.
//
//	set: func(key: string, value: list<u8>) -> result<_, datastore-error>
//
//go:nosplit
func (self Framedata) Set(key string, value cm.List[uint8]) (result cm.Result[DatastoreError, struct{}, DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerList(value)
	wasmimport_FramedataSet((uint32)(self0), (*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), &result)
	return
}

// Processordata represents the imported resource "wasmvision:platform/datastore#processordata".
//
//	resource processordata
type Processordata cm.Resource

// ResourceDrop represents the imported resource-drop for resource "processordata".
//
// Drops a resource handle.
//
//go:nosplit
func (self Processordata) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ProcessordataResourceDrop((uint32)(self0))
	return
}

// ProcessordataOpen represents the imported static function "open".
//
// # Open the processor datastore for the specified processor
//
// `error::no-such-store` will be raised if the `processor` is not recognized.
//
//	open: static func(processor: string) -> result<processordata, datastore-error>
//
//go:nosplit
func ProcessordataOpen(processor string) (result cm.Result[Processordata, Processordata, DatastoreError]) {
	processor0, processor1 := cm.LowerString(processor)
	wasmimport_ProcessordataOpen((*uint8)(processor0), (uint32)(processor1), &result)
	return
}

// Delete represents the imported method "delete".
//
// Delete the tuple with the specified `key`
//
// No error is raised if a tuple did not previously exist for `key`.
//
//	delete: func(key: string) -> result<_, datastore-error>
//
//go:nosplit
func (self Processordata) Delete(key string) (result cm.Result[DatastoreError, struct{}, DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_ProcessordataDelete((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Exists represents the imported method "exists".
//
// Return whether a tuple exists for the specified `key`
//
//	exists: func(key: string) -> result<bool, datastore-error>
//
//go:nosplit
func (self Processordata) Exists(key string) (result cm.Result[bool, bool, DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_ProcessordataExists((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Get represents the imported method "get".
//
// Get the value associated with the specified `key`
//
// Returns `ok(none)` if the key does not exist.
//
//	get: func(key: string) -> result<list<u8>, datastore-error>
//
//go:nosplit
func (self Processordata) Get(key string) (result cm.Result[cm.List[uint8], cm.List[uint8], DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_ProcessordataGet((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// GetKeys represents the imported method "get-keys".
//
// Return a list of all the keys
//
//	get-keys: func() -> result<list<string>, datastore-error>
//
//go:nosplit
func (self Processordata) GetKeys() (result cm.Result[cm.List[string], cm.List[string], DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ProcessordataGetKeys((uint32)(self0), &result)
	return
}

// Set represents the imported method "set".
//
// Set the `value` associated with the specified `key` overwriting any existing value.
//
//	set: func(key: string, value: list<u8>) -> result<_, datastore-error>
//
//go:nosplit
func (self Processordata) Set(key string, value cm.List[uint8]) (result cm.Result[DatastoreError, struct{}, DatastoreError]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerList(value)
	wasmimport_ProcessordataSet((uint32)(self0), (*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), &result)
	return
}

// DatastoreError represents the enum "wasmvision:platform/datastore#datastore-error".
//
// datastore errors returned by the runtime.
//
//	enum datastore-error {
//		success,
//		no-such-store,
//		runtime-error
//	}
type DatastoreError uint8

const (
	DatastoreErrorSuccess DatastoreError = iota
	DatastoreErrorNoSuchStore
	DatastoreErrorRuntimeError
)

var stringsDatastoreError = [3]string{
	"success",
	"no-such-store",
	"runtime-error",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e DatastoreError) String() string {
	return stringsDatastoreError[e]
}
