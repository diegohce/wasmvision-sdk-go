package wasmvision:platform;

interface config {
	enum config-error {
		/// success, all is well.
		success,
		/// The requested key does not exist in the configuration.
		no-such-key
	}
	get-config: func(key: string) -> result<string, config-error>;
}

interface http {
	/// HTTP errors returned by the runtime.
	enum http-error {
		success,
		destination-not-allowed,
		invalid-url,
		request-error,
		runtime-error,
		too-many-requests
	}

	/// Get the content at the specified URL.
	/// Returns either the content or an error.
	get: func(url: string) -> result<list<u8>, http-error>;

	/// Post the content to the specified URL.
	/// Returns either the response content or an error.
	post: func(url: string, content-type: string, body: list<u8>) -> result<list<u8>, http-error>;
}

interface key-value {
	/// An open key-value store
	resource store {

		/// Delete the tuple with the specified `key`
		///
		/// No error is raised if a tuple did not previously exist for `key`.
		delete: func(key: string) -> result<_, error>;

		/// Return whether a tuple exists for the specified `key`
		exists: func(key: string) -> result<bool, error>;

		/// Get the value associated with the specified `key`
		///
		/// Returns `ok(none)` if the key does not exist.
		get: func(key: string) -> result<option<list<u8>>, error>;

		/// Return a list of all the keys
		get-keys: func() -> result<list<string>, error>;

		/// Set the `value` associated with the specified `key` overwriting any existing value.
		set: func(key: string, value: list<u8>) -> result<_, error>;

		/// Open the store with the specified label.
		///
		/// `label` must refer to a store allowed in the spin.toml manifest.
		///
		/// `error::no-such-store` will be raised if the `label` is not recognized.
		open: static func(label: string) -> result<store, error>;
	}

	/// The set of errors which may be raised by functions in this interface
	variant error {
		/// Too many stores have been opened simultaneously. Closing one or more
		/// stores prior to retrying may address this.
		store-table-full,
		/// The host does not recognize the store label requested.
		no-such-store,
		/// The requesting component does not have access to the specified store
		/// (which may or may not exist).
		access-denied,
		/// Some implementation-specific error has occurred (e.g. I/O)
		other(string),
	}
}

interface logging {
	/// Log a message on the host.
	log: func(msg: string);

	/// Print a message on the host.
	println: func(msg: string);
}

/// wasmvision is a WebAssembly guest module interface for host functions provided
/// by the wasmVision runtime.
world imports {
	import logging;
	import config;
	import key-value;
	import http;
}
