package wasmvision:platform;

interface config {
	enum config-error {
		/// success, all is well.
		success,
		/// The requested key does not exist in the configuration.
		no-such-key
	}
	get-config: func(key: string) -> result<string, config-error>;
}

interface http {
	/// HTTP errors returned by the runtime.
	enum http-error {
		success,
		destination-not-allowed,
		invalid-url,
		request-error,
		runtime-error,
		too-many-requests
	}

	/// Get the content at the specified URL.
	/// Returns either the content or an error.
	get: func(url: string) -> result<list<u8>, http-error>;

	/// Post the content to the specified URL.
	/// Returns either the response content or an error.
	post: func(url: string, content-type: string, body: list<u8>) -> result<list<u8>, http-error>;
}

interface logging {
	/// Log a message on the host.
	log: func(msg: string);

	/// Print a message on the host.
	println: func(msg: string);
}

interface time {
	/// Get the current time in milliseconds since the Unix epoch.
	now: func() -> u64;
}

/// wasmvision is a WebAssembly guest module interface for host functions provided
/// by the wasmVision runtime.
world imports {
	import time;
	import logging;
	import config;
	import http;
}
