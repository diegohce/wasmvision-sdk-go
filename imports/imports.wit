package wasmvision:platform;

interface config {
	enum config-error {
		/// success, all is well.
		success,
		/// The requested key does not exist in the configuration.
		no-such-key
	}
	get-config: func(key: string) -> result<string, config-error>;
}

interface datastore {
	/// An open key-value store
	resource framedata {

		/// Delete the tuple with the specified `key`
		///
		/// No error is raised if a tuple did not previously exist for `key`.
		delete: func(key: string) -> result<_, datastore-error>;

		/// Return whether a tuple exists for the specified `key`
		exists: func(key: string) -> result<bool, datastore-error>;

		/// Get the value associated with the specified `key`
		///
		/// Returns `ok(none)` if the key does not exist.
		get: func(key: string) -> result<list<u8>, datastore-error>;

		/// Return a list of all the keys
		get-keys: func() -> result<list<string>, datastore-error>;

		/// Set the `value` associated with the specified `key` overwriting any existing value.
		set: func(key: string, value: list<u8>) -> result<_, datastore-error>;

		/// Open the frame datastore for the specified frame.
		///
		/// `error::no-such-store` will be raised if the `frame` is not recognized.
		open: static func(frame: u32) -> result<framedata, datastore-error>;
	}
	resource processordata {

		/// Delete the tuple with the specified `key`
		///
		/// No error is raised if a tuple did not previously exist for `key`.
		delete: func(key: string) -> result<_, datastore-error>;

		/// Return whether a tuple exists for the specified `key`
		exists: func(key: string) -> result<bool, datastore-error>;

		/// Get the value associated with the specified `key`
		///
		/// Returns `ok(none)` if the key does not exist.
		get: func(key: string) -> result<list<u8>, datastore-error>;

		/// Return a list of all the keys
		get-keys: func() -> result<list<string>, datastore-error>;

		/// Set the `value` associated with the specified `key` overwriting any existing value.
		set: func(key: string, value: list<u8>) -> result<_, datastore-error>;

		/// Open the processor datastore for the specified processor
		///
		/// `error::no-such-store` will be raised if the `processor` is not recognized.
		open: static func(processor: string) -> result<processordata, datastore-error>;
	}

	/// datastore errors returned by the runtime.
	enum datastore-error {
		success,
		no-such-store,
		runtime-error
	}
}

interface http {
	/// HTTP errors returned by the runtime.
	enum http-error {
		success,
		destination-not-allowed,
		invalid-url,
		request-error,
		runtime-error,
		too-many-requests
	}

	/// Get the content at the specified URL.
	/// Returns either the content or an error.
	get: func(url: string) -> result<list<u8>, http-error>;

	/// Post the content to the specified URL.
	/// Returns either the response content or an error.
	post: func(url: string, content-type: string, body: list<u8>) -> result<list<u8>, http-error>;

	/// Post the image to the specified URL.
	/// Template is the template to use to send the image.
	/// If the content-type is image/jpeg or image/png, the template is ignored, and the
	/// image is simply converted and sent in that format.
	/// Otherwise, the template is used to convert the image to the desired format using
	/// simple substitution of the symbol %IMAGE%
	/// after base64 encoding the image.
	/// The response-item is the item in the response to return. Usually this will be
	/// a JSON element that will be parsed.
	/// Mat is the reference to to the Mat to use.
	post-image: func(url: string, content-type: string, request-template: list<u8>, response-item: string, mat: u32) -> result<list<u8>, http-error>;
}

interface logging {
	/// DEPRECATED: Log a message on the host.
	/// Instead use error, warn, info, or debug.
	log: func(msg: string);

	/// Log an error on the host.
	error: func(msg: string);

	/// Log a warning on the host.
	warn: func(msg: string);

	/// Log some non-critical information on the host.
	info: func(msg: string);

	/// Log some debugging info on the host.
	debug: func(msg: string);

	/// Print a message on the host. Intended to bypassing the normal logging system.
	println: func(msg: string);
}

interface time {
	/// Get the current time in milliseconds since the Unix epoch. Use 0 for the `tz`
	/// parameter for now.
	now: func(tz: u32) -> u64;
}

/// wasmvision is a WebAssembly guest module interface for host functions provided
/// by the wasmVision runtime.
world imports {
	import time;
	import logging;
	import config;
	import http;
	import datastore;
}
