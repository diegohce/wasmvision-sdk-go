// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package config represents the imported interface "wasmvision:platform/config".
package config

import (
	"go.bytecodealliance.org/cm"
)

// ConfigError represents the enum "wasmvision:platform/config#config-error".
//
//	enum config-error {
//		success,
//		no-such-key
//	}
type ConfigError uint8

const (
	// success, all is well.
	ConfigErrorSuccess ConfigError = iota

	// The requested key does not exist in the configuration.
	ConfigErrorNoSuchKey
)

var _ConfigErrorStrings = [2]string{
	"success",
	"no-such-key",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ConfigError) String() string {
	return _ConfigErrorStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ConfigError) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ConfigError) UnmarshalText(text []byte) error {
	return _ConfigErrorUnmarshalCase(e, text)
}

var _ConfigErrorUnmarshalCase = cm.CaseUnmarshaler[ConfigError](_ConfigErrorStrings[:])

// GetConfig represents the imported function "get-config".
//
//	get-config: func(key: string) -> result<string, config-error>
//
//go:nosplit
func GetConfig(key string) (result cm.Result[string, string, ConfigError]) {
	key0, key1 := cm.LowerString(key)
	wasmimport_GetConfig((*uint8)(key0), (uint32)(key1), &result)
	return
}
